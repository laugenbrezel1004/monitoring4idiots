// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id   String @id @default(uuid())
  name String

  email         String  @unique
  emailVerified Boolean @default(false)

  avatarUrl String?
  password  String?

  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Account {
  id String @id @default(uuid())

  provider          String
  providerAccountId String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, provider])
}

model Session {
  id String @id

  expiresAt DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Host {
  id   String @id @default(uuid())
  name String @unique

  systemInfo    SystemInfo[]
  memoryInfo    MemoryInfo[]
  diskInfo      DiskInfo[]
  interfaceInfo InterfaceInfo[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model SystemInfo {
  kernelVersion String
  osVersion     String

  host   Host   @relation(fields: [hostId], references: [id], onDelete: Cascade)
  hostId String

  timestamp DateTime @default(now())

  @@id([hostId, timestamp])
}

model MemoryInfo {
  totalMemory     Float @default(0)
  availableMemory Float @default(0)
  usedMemory      Float @default(0)

  totalSwap     Float @default(0)
  availableSwap Float @default(0)
  usedSwap      Float @default(0)

  host   Host   @relation(fields: [hostId], references: [id], onDelete: Cascade)
  hostId String

  timestamp DateTime @default(now())

  @@id([hostId, timestamp])
}

model DiskInfo {
  name           String
  mountPoint     String?
  totalSpace     Float   @default(0)
  availableSpace Float   @default(0)

  host   Host   @relation(fields: [hostId], references: [id], onDelete: Cascade)
  hostId String

  timestamp DateTime @default(now())

  @@id([hostId, timestamp, name])
}

model InterfaceInfo {
  name            String
  dataReceived    Float  @default(0)
  dataTransmitted Float  @default(0)

  host   Host   @relation(fields: [hostId], references: [id], onDelete: Cascade)
  hostId String

  timestamp DateTime @default(now())

  @@id([hostId, timestamp, name])
}
